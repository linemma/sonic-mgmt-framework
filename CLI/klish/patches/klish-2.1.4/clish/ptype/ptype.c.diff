7a8
> #include "lub/argv/private.h"
14a16,116
> #include <ctype.h>
> #include <stdbool.h>
> #include <sys/types.h>
> #include <dirent.h>
> 
> /*--------------------------------------------------------- */
> char *clish_ptype_regexp_select__get_ext_help(const clish_ptype_t * this,
>         unsigned index)
> {
>     return (char*)lub_argv__get_arg(this->u.regexp_select.ext_help, index);
> }
> 
> /*--------------------------------------------------------- */
> char *clish_ptype_select__get_ext_help(const clish_ptype_t *this,
>                 unsigned index)
> {
>         return (char*)lub_argv__get_arg(this->u.select.ext_help, index);
> }
> 
> /*--------------------------------------------------------- */
> static int ext_help_argv_count(const char *line)
> {
> 	int i = 0, j = 0;
> 	char *tmp = (char*)line;
> 
> 	for (tmp = strchr(tmp, '(');tmp;tmp = strchr(tmp, '(')) {
> 		tmp++;
> 		i++;
> 	}
> 	tmp = (char*) line;
> 
> 	for (tmp=strchr(tmp, ')');tmp;tmp = strchr(tmp, ')')) {
> 		tmp++;
> 		j++;
> 	}
> 	if (i != j)
> 		return -1;
> 	else
> 	return i;
> }
> 
> /*--------------------------------------------------------- */
> void ext_help_argv_init(lub_argv_t * this, const char *ext_help, size_t offset)
> {
> 	lub_arg_t *arg;
> 	const char *lbrk;
> 	const char *rbrk;
> 	const char *value;
> 	size_t value_len;
> 	char *tmp;
> 
> 	this->argv = NULL;
> 	this->argc = 0;
> 
> 	if (!ext_help)
> 		return;
> 
> 	/* first of all count the words in the line */
> 	this->argc = ext_help_argv_count(ext_help);
> 	if (0 >= this->argc)
> 		return;
> 
> 	/* allocate space to hold the vector */
> 	arg = this->argv = malloc(sizeof(lub_arg_t) * this->argc);
> 	assert(arg);
> 	lbrk = strchr(ext_help, '(');
> 	rbrk = strchr(ext_help, ')');
> 	value = ext_help;
> 	tmp =(char*) value;
> 	value_len = strlen(ext_help);
> 
> 	/* then fill out the array with the words */
> 	for (;lbrk; lbrk = strchr(tmp, '('),rbrk = strchr(tmp, ')')) {
> 		if (lbrk) {
> 			value = lbrk + 1;
> 			if (rbrk)
> 				value_len = (size_t) (rbrk - value);
> 		}
> 		if (value_len) {
> 			(*arg).arg = lub_string_dupn(value, value_len);
> 			(*arg).offset = offset;
> 			(*arg).quoted = BOOL_FALSE;
> 			offset += value_len;
> 			if(rbrk)
> 				tmp = (char*)rbrk + 1;
> 				arg++;
> 		}
> 	}
> }
> 
> /*--------------------------------------------------------- */
> static lub_argv_t *ext_help_argv_store(const char *line, size_t offset)
> {
> 	lub_argv_t *this;
> 
> 	this = malloc(sizeof(lub_argv_t));
> 	if (this)
> 		ext_help_argv_init(this, line, offset);
> 
> 	return this;
> }
25a128,169
> bool clish_ptype_regexp_select_check_match(const clish_ptype_t *this, const char *text)
> {
> 	char *result = NULL;
> 	int i = 0;
> 	bool ret = false;
> 
> 	if(!this || !text)
> 		return ret;
> 
> 	while ((result = clish_ptype_regexp_select__get_name(this, i++))) {
> 		/* get the next item and check if it is a completion */
> 		if (result == lub_string_nocasestr(result, text)) {
> 			lub_string_free(result);
> 			ret = true;
> 			break;
> 		}
> 		lub_string_free(result);
> 	}
> 
> 	return ret;
> }
> 
> /*--------------------------------------------------------- */
> static void clish_ptype_regexp_select_get_match(const clish_ptype_t *this,
> 	const char *text, lub_argv_t *matches)
> {
> 	char *result = NULL;
> 	int i = 0;
> 
> 	if(!this || !text || !matches)
> 		return;
> 
> 	while ((result = clish_ptype_regexp_select__get_name(this, i++))) {
> 		/* get the next item and check if it is a completion */
> 		if (result == lub_string_nocasestr(result, text)){
> 			lub_argv_add(matches, result);
> 		}
> 		lub_string_free(result);
> 	}
> }
> 
> /*--------------------------------------------------------- */
28c172,173
< 	clish_ptype_method_e method, clish_ptype_preprocess_e preprocess)
---
> 	clish_ptype_method_e method, clish_ptype_preprocess_e preprocess,
> 	const char *ext_pattern, const char *ext_help)
36a182,184
> 	this->ext_pattern = NULL;
>         this->ext_help = NULL;
> 	this->usename = BOOL_TRUE;
37a186,191
> 	this->u.select.ext_help = NULL;
> 
> 	if (ext_pattern || ext_help) {
> 		/* set the pattern */
> 		clish_ptype__set_extpattern(this, ext_pattern, method, ext_help);
> 	}
66a221,226
> 		case CLISH_PTYPE_METHOD_REGEXP_SELECT:
> 			regfree(&this->u.regexp_select.regexp);
> 			lub_argv_delete(this->u.regexp_select.items);
> 			if (this->u.regexp_select.ext_help)
> 				lub_argv_delete(this->u.regexp_select.ext_help);
> 			break;
72a233
> 	this->name = NULL;
73a235
> 	this->text = NULL;
74a237
> 	this->pattern = NULL;
75a239,243
> 	this->range = NULL;
> 	lub_string_free(this->ext_pattern);
> 	this->ext_pattern = NULL;
> 	lub_string_free(this->ext_help);
> 	this->ext_help = NULL;
76a245
> 
82c251,252
< 	clish_ptype_method_e method, clish_ptype_preprocess_e preprocess)
---
> 	clish_ptype_method_e method, clish_ptype_preprocess_e preprocess,
> 	const char *ext_pattern, const char *ext_help)
87c257
< 		clish_ptype_init(this, name, help, pattern, method, preprocess);
---
> 		clish_ptype_init(this, name, help, pattern, method, preprocess, ext_pattern, ext_help);
144a315,353
> char *clish_ptype_regexp_select__get_name(const clish_ptype_t * this,
> 	unsigned index)
> {
> 	char *result = NULL;
> 	const char *arg = lub_argv__get_arg(this->u.regexp_select.items, index);
> 	if (arg) {
> 		size_t name_len = strlen(arg);
> 		const char *lbrk = strchr(arg, '(');
> 		if (lbrk)
> 			name_len = (size_t) (lbrk - arg);
> 		if (name_len)
> 			result = lub_string_dupn(arg, name_len);
> 	}
> 	return result;
> }
> 
> /*--------------------------------------------------------- */
> char *clish_ptype_regexp_select__get_value(const clish_ptype_t * this,
> 	unsigned index)
> {
> 	char *result = NULL;
> 	const char *arg = lub_argv__get_arg(this->u.regexp_select.items, index);
> 	if (arg) {
> 		const char *lbrk = strchr(arg, '(');
> 		const char *rbrk = strchr(arg, ')');
> 		const char *value = arg;
> 		size_t value_len = strlen(arg);
> 		if (lbrk) {
> 			value = lbrk + 1;
> 			if (rbrk)
> 				value_len = (size_t) (rbrk - value);
> 		}
> 		if (value_len)
> 			result = lub_string_dupn(value, value_len);
> 	}
> 	return result;
> }
> 
> /*--------------------------------------------------------- */
190a400,426
> 	case CLISH_PTYPE_METHOD_REGEXP_SELECT:
> 	{
> 		/* Setup the selection values to the help text */
> 		unsigned int i, cnt;
> 		cnt = lub_argv__get_count(this->u.regexp_select.items);
> 		for (i = 0; i < cnt; i++) {
> 			char *name = clish_ptype_regexp_select__get_name(this, i);
> 			char *text = clish_ptype_regexp_select__get_value(this, i);
> 
> 			if (name) {
> 				if (i < cnt-1)
> 					snprintf(tmp, sizeof(tmp),"%s/", name);
> 				else
> 					snprintf(tmp, sizeof(tmp), "%s", name);
> 			} else if (text)
> 				snprintf(tmp, sizeof(tmp),"%s", text);
> 
> 			tmp[sizeof(tmp) - 1] = '\0';
> 			lub_string_cat(&this->range, tmp);
> 			if (name)
> 				lub_string_free(name);
> 			if (text)
> 				lub_string_free(text);
> 		}
> 		break;
> 	}
> 	/*------------------------------------------------- */
203c439,440
< 	"code"
---
> 	"code",
> 	"regexp_select"
214a452,457
> clish_ptype_method_e clish_ptype__get_method(const clish_ptype_t * this)
> {
> 	return (clish_ptype_method_e) (this->method);
> }
> 
> /*--------------------------------------------------------- */
264c507
< 	lub_argv_t *matches, const char *text)
---
> 	lub_argv_t *matches, const char *text,  const char *penultimate_text)
267a511
> 	bool ret = false;
270c514,515
< 	if (this->method != CLISH_PTYPE_METHOD_SELECT)
---
> 	if (this->method != CLISH_PTYPE_METHOD_SELECT &&
> 		this->method != CLISH_PTYPE_METHOD_REGEXP_SELECT)
274,284c519,522
< 	result = clish_ptype_validate(this, text);
< 	if (result) {
< 		lub_argv_add(matches, result);
< 		lub_string_free(result);
< 		return;
< 	}
< 
< 	/* Iterate possible completion */
< 	while ((result = clish_ptype_select__get_name(this, i++))) {
< 		/* get the next item and check if it is a completion */
< 		if (result == lub_string_nocasestr(result, text))
---
> 	if(this->method == CLISH_PTYPE_METHOD_SELECT)
> 	{
> 		result = clish_ptype_validate(this, text, BOOL_TRUE);
> 		if (result) {
286c524,550
< 		lub_string_free(result);
---
> 			lub_string_free(result);
> 			return;
> 		}
> 
> 		/* Iterate possible completion */
> 		while ((result = clish_ptype_select__get_name(this, i++))) {
> 			/* get the next item and check if it is a completion */
> 			if (result == lub_string_nocasestr(result, text))
> 				lub_argv_add(matches, result);
> 			lub_string_free(result);
> 		}
> 	} else {
> 		/*  Only for case like  "interface vl",On tab, we need
> 		 *  clish_ptype_word_generator to get list of completion
> 		 *  matches.For all case like "interface vlan " and
>                  *  "interface vlan 1" and "interface vlan vl", On <tab>,
>                  *  auto-completion is not needed.
>                  *  For these cases, clish_ptype_regexp_select_check_match
>                  *  called with penultimate text will return true.
>                  *  This ensures we never attempt to call
>                  *  clish_ptype_regexp_select_get_match.
>                  */
>                 ret = clish_ptype_regexp_select_check_match(this, penultimate_text);
>                 if(ret)
>                         return;
> 
>                 clish_ptype_regexp_select_get_match(this, text, matches);
287a552
> 
292c557
< 	const char *text, bool_t translate)
---
> 	const char *text, bool_t translate, bool_t isHelp)
346a612,726
>         case CLISH_PTYPE_METHOD_REGEXP_SELECT:
>         {
>         	unsigned i;
> 
> 		if(isHelp){
> 			for (i = 0; i < lub_argv__get_count(this->u.regexp_select.items); i++) {
> 				char *name = clish_ptype_regexp_select__get_name(this, i);
> 				char *value = clish_ptype_regexp_select__get_value(this, i);
> 				int tmp = 0;
> 
>                 		if (name) tmp = lub_string_nocasecmp(result, name);
>                                	lub_string_free((BOOL_TRUE == translate) ? name : value);
>                                 if (0 == tmp) {
>                                         lub_string_free(result);
>                                         result = ((BOOL_TRUE == translate) ? value : name);
>                                         break;
>                                 } else {
>                                         lub_string_free((BOOL_TRUE == translate) ? value : name);
>                                 }
> 			}
>                         if (i == lub_argv__get_count(this->u.regexp_select.items)) {
>                                 // failed to find a match
>                                 lub_string_free(result);
>                                 result = NULL;
>                         }
>                 } else {
>                        	/* test the regular expression against the string */
>                         /* lint -e64 Type mismatch (arg. no. 4) */
>                         /*
>                          * lint seems to equate regmatch_t[] as being of type regmatch_t !
>                          */
>                        	if (0 != regexec(&this->u.regexp_select.regexp, result, 0, NULL, 0)) {
>                         	lub_string_free(result);
>                                 result = NULL;
>                         }
>                         if (result) {
>                         	int index = -1, j;
>                                 bool_t matched = BOOL_FALSE;
>                                 char *new_result = NULL, *tmp = NULL;
>                                 /* Loop through possible help string options,
>                                  * such as ethernet, vlan and portchannel
>                                  * if given CLI matches first two character
>                                  * like po 10 then start at array index 3 and
>                                  * skip if any space lies between po and 10.
>                                  * If given CLI is like p 10 then start at
> 				 * array index 2 and skip if any space lies
>                                  * between p and 10.
>                                  */
>                                 for (j = 0; j < lub_argv__get_count(this->u.regexp_select.items); j++) {
>                                 	char *name = clish_ptype_regexp_select__get_name(this, j);
>                                        	/* In the below piece of code, we try to expand the name.
>                                            If user has eth1, it needs to be converted to ethernet1.
>                                            Similarly,if user gives "ethernet 1", the space need to be
>                                            stripped */
>                                 	if (name && strncasecmp(name, result, strlen(name))) {
>                                         	/* result not matching the name specified in the ptype.
>                                                    user could have entered short form eth.So check if
>                                                    the entered string is substring of the name after
>                                                    stripping the port number portion */
>                                                 index = get_index(result);
> 					       	if (!strncasecmp(name, result, index)) {
> 							tmp = result + index;
>                                                         matched = BOOL_TRUE;
>                                                 }
>                                                 if (matched == BOOL_TRUE) {
>                                                 	while (isspace(*tmp))
>                                                         	tmp++;
>                                                                 new_result = lub_string_dup(name);
>                                                                 lub_string_cat(&new_result, tmp);
> 								lub_string_free(result);
>                                                                 result = new_result;
>                                 			/* Variable name going out of scope will leaks the storage it
>                                  			 * points to. So free memory pointed by it
>                                  			 * to avoid resource leak.
>                                  			 */
>                                 				if(name != NULL) {
>                                     					lub_string_free(name);
>                                     					name = NULL;
>                                 				}
>                                                                 break;
>                                                 }
>                                         } else {
>                                         	/* CLI is given matches with complete help string
>                                                  * such as ethernet, vlan, portchannel, so nothing
>                                                  * do to here. */
>                                                 matched = BOOL_TRUE;
>                             			/* Variable name going out of scope will leaks the storage it
>                              			 * points to. So free memory pointed by it
>                              			 * to avoid resource leak.  */
>                             			if(name != NULL) {
>                                 			lub_string_free(name);
>                                 			name = NULL;
>                             			}
>                                                 break;
>                                         }
>                         		/* Variable name going out of scope will leaks the storage it
>                          		 * points to. So free memory pointed by it
>                          		 * to avoid resource leak.
>                          		 */
>                         		if(name != NULL) {
>                             			lub_string_free(name);
>                             			name = NULL;
>                         		}
>                                 }
>                                 if (matched == BOOL_FALSE) {
>                                 	lub_string_free(result);
>                                         result = NULL;
>                                 }
>                         }
>                 }
>                 /*lint +e64 */
>                 break;
> 	}
> 
> 	/*------------------------------------------------- */
437c817
< char *clish_ptype_validate(clish_ptype_t * this, const char *text)
---
> char *clish_ptype_validate(clish_ptype_t * this, const char *text, bool_t isHelp)
439c819
< 	return clish_ptype_validate_or_translate(this, text, BOOL_FALSE);
---
> 	return clish_ptype_validate_or_translate(this, text, BOOL_FALSE, BOOL_TRUE);
445c825
< 	return clish_ptype_validate_or_translate(this, text, BOOL_TRUE);
---
> 	return clish_ptype_validate_or_translate(this, text, BOOL_TRUE, BOOL_FALSE);
500a881,895
> 	case CLISH_PTYPE_METHOD_REGEXP_SELECT:
>                 {
>                         int result;
>                         /* only the expression is allowed */
>                         lub_string_cat(&this->pattern, "^");
>                         lub_string_cat(&this->pattern, pattern);
>                         lub_string_cat(&this->pattern, "$");
>                         /* compile the regular expression for later use */
>                         result = regcomp(&(this->u.regexp_select.regexp), this->pattern,
>                                  REG_EXTENDED);
>                         assert(0 == result);
>                         break;
>                 }
> 
> 	/*------------------------------------------------- */
506a902,1024
> 
> 
> void clish_ptype__set_extpattern(clish_ptype_t * this,
>                 const char *ext_pattern, clish_ptype_method_e method, const char *ext_help)
> {
>         assert(NULL == this->pattern);
>         this->method = method;
> 
>         switch (this->method) {
>                 /*------------------------------------------------- */
> 
>                 case CLISH_PTYPE_METHOD_REGEXP_SELECT:
>                         this->u.regexp_select.items = NULL;
>                         this->u.regexp_select.ext_help = NULL;
>                         if (ext_pattern) {
>                                 this->ext_pattern = lub_string_dup(ext_pattern);
>                                 /* store a vector of item descriptors */
>                                 this->u.regexp_select.items = lub_argv_new(this->ext_pattern, 0);
>                         }
>                         if (ext_help) {
>                                 this->ext_help =  lub_string_dup(ext_help);
>                                 /* store a vector of item descriptors */
>                                 this->u.regexp_select.ext_help = ext_help_argv_store(this->ext_help, 0);
>                         }
>                         break;
> 
> 		case CLISH_PTYPE_METHOD_SELECT:
>                         if (ext_help) {
>                                 this->ext_help =  lub_string_dup(ext_help);
>                                 /* store a vector of item descriptors */
>                                 this->u.select.ext_help = ext_help_argv_store(this->ext_help, 0);
>                         }
>                         break;
>         default:
>             break;
>         }
> }
> 
> /*--------------------------------------------------------- */
> help_type_t clish_ptype__get_usename(const clish_ptype_t * this)
> {
>         return this->usename;
> }
> /*--------------------------------------------------------- */
> void clish_ptype__set_usename(clish_ptype_t * this, help_type_t val)
> {
>         this->usename = val;
> }
> 
> /*--------------------------------------------------------- */
> lub_argv_t *clish_ptype_regexp_select__get_argv(const clish_ptype_t * this)
> {
>         if (!this)
>             return NULL;
>         return (this->u.regexp_select.items);
> }
> 
> /*--------------------------------------------------------- */
> int clish_ptype_regexp_select__get_argv_count(const clish_ptype_t * this)
> {
>     return (lub_argv__get_count(this->u.regexp_select.items));
> }
> 
> /*--------------------------------------------------------- */
> char *clish_ptype_regexp_select__get_argname(const clish_ptype_t * this,
> 	unsigned index)
> {
>         if (!this)
>         	return NULL;
> 	return (clish_ptype_regexp_select__get_name(this, index));
> }
> 
> /*--------------------------------------------------------- */
> int clish_ptype_select__get_help(const clish_ptype_t *this, clish_help_t *help, const char *pval)
> {
>         if(NULL != this->u.select.ext_help) {
>                 unsigned i;
>                 char *name, *ext_help;
>                 if(pval) {
>                         for (i = 0; i < lub_argv__get_count(this->u.select.ext_help);
>                                         i++) {
>                                 name = clish_ptype_select__get_name(this, i);
>                                 if(NULL == name) {
>                                         continue;
>                                 }
>                                 if(strncmp(pval, name, strlen(pval)) == 0) {
>                                         ext_help = clish_ptype_select__get_ext_help(this, i);
>                                         lub_argv_add(help->name, name);
>                                         lub_argv_add(help->help, ext_help);
>                                 }
>                 /*Overwriting pointer name while looping will
>                  * leak the storage that name pointed to. So
>                  * free the memory before overriding to avoid
>                  * resource leak.
>                  */
>                  lub_string_free(name);
>                  name = NULL;
>                         }
>                 } else {
>                         for (i = 0; i < lub_argv__get_count(this->u.select.ext_help);
>                                         i++) {
>                                 name = clish_ptype_select__get_name(this, i);
>                                 if(NULL == name) {
>                                         continue;
>                                 }
>                                 ext_help = clish_ptype_select__get_ext_help(this, i);
>                                 lub_argv_add(help->name, name);
>                                 lub_argv_add(help->help, ext_help);
>                 /*Overwriting pointer name while looping will 
>                  * leak the storage that name pointed to. So 
>                  * free the memory before overriding to avoid
>                  * resource leak.
>                  */
>                  lub_string_free(name);
>                  name = NULL;
>                         }
>                 }
> 
>                 return 0;
>         }
>         return -1;
> }
> 
