Binary files ygot-dir-orig/ygot/.git/index and ygot-dir/ygot/.git/index differ
diff -ruN ygot-dir-orig/ygot/generator/generator.go ygot-dir/ygot/generator/generator.go
--- ygot-dir-orig/ygot/generator/generator.go	2020-04-20 17:01:35.820800000 -0700
+++ ygot-dir/ygot/generator/generator.go	2020-04-20 19:52:33.787286000 -0700
@@ -109,7 +109,15 @@
 }
 
 // writeIfNotEmpty writes the string s to b if it has a non-zero length.
-func writeIfNotEmpty(b io.StringWriter, s string) {
+// commented out the below method, since "io.StringWriter" is introduced in go 1.12
+//func writeIfNotEmpty(b io.StringWriter, s string) {
+//	if len(s) != 0 {
+//		b.WriteString(s)
+//	}
+//}
+
+// temp. - remove this method when we support go 1.12, and uncomment above method
+func writeIfNotEmpty(b *strings.Builder, s string) {
 	if len(s) != 0 {
 		b.WriteString(s)
 	}
diff -ruN ygot-dir-orig/ygot/genutil/common.go ygot-dir/ygot/genutil/common.go
--- ygot-dir-orig/ygot/genutil/common.go	2020-04-20 17:01:35.838543000 -0700
+++ ygot-dir/ygot/genutil/common.go	2020-04-20 19:52:50.425069000 -0700
@@ -18,9 +18,9 @@
 
 import (
 	"fmt"
-	"io"
 	"sort"
-
+	"strings"
+	
 	"github.com/openconfig/goyang/pkg/yang"
 	"github.com/openconfig/ygot/util"
 	"github.com/openconfig/ygot/ygot"
@@ -42,7 +42,15 @@
 )
 
 // WriteIfNotEmpty writes the string s to b if it has a non-zero length.
-func WriteIfNotEmpty(b io.StringWriter, s string) {
+// commented out the below method, since we don't support go 1.12 currently
+//func WriteIfNotEmpty(b io.StringWriter, s string) {
+//	if len(s) != 0 {
+//		b.WriteString(s)
+//	}
+//}
+
+// temp. - remove this method when we support go 1.12, and uncomment above method
+func WriteIfNotEmpty(b *strings.Builder, s string) {
 	if len(s) != 0 {
 		b.WriteString(s)
 	}
diff -ruN ygot-dir-orig/ygot/util/debug.go ygot-dir/ygot/util/debug.go
--- ygot-dir-orig/ygot/util/debug.go	2020-04-20 17:01:36.378444000 -0700
+++ ygot-dir/ygot/util/debug.go	2020-04-20 17:09:33.696199000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package util
 
 import (
@@ -53,6 +56,14 @@
 	fmt.Println(globalIndent + out)
 }
 
+func IsDebugLibraryEnabled () bool {
+	return debugLibrary
+}
+
+func IsDebugSchemaEnabled () bool {
+	return debugSchema
+}
+
 // DbgSchema prints v if the package global variable debugSchema is set.
 // v has the same format as Printf.
 func DbgSchema(v ...interface{}) {
@@ -177,6 +188,9 @@
 
 // YangTypeToDebugString returns a debug string representation of a YangType.
 func YangTypeToDebugString(yt *yang.YangType) string {
+	if !debugLibrary {
+		return ""
+	}
 	out := fmt.Sprintf("(TypeKind: %s", yang.TypeKindToName[yt.Kind])
 	if len(yt.Pattern) != 0 {
 		out += fmt.Sprintf(", Pattern: %s", strings.Join(yt.Pattern, " or "))
diff -ruN ygot-dir-orig/ygot/util/path.go ygot-dir/ygot/util/path.go
--- ygot-dir-orig/ygot/util/path.go	2020-04-20 17:01:36.383799000 -0700
+++ ygot-dir/ygot/util/path.go	2020-04-20 17:09:33.700678000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package util
 
 import (
@@ -23,6 +26,8 @@
 	"github.com/openconfig/goyang/pkg/yang"
 )
 
+var pathToSchemaCache map[reflect.StructTag][]string = make(map[reflect.StructTag][]string)
+
 // SchemaPaths returns all the paths in the path tag.
 func SchemaPaths(f reflect.StructField) ([][]string, error) {
 	var out [][]string
@@ -49,25 +54,32 @@
 // leafref; the schema *yang.Entry for the field is given by
 // schema.Dir["config"].Dir["a"].
 func RelativeSchemaPath(f reflect.StructField) ([]string, error) {
-	pathTag, ok := f.Tag.Lookup("path")
-	if !ok || pathTag == "" {
-		return nil, fmt.Errorf("field %s did not specify a path", f.Name)
-	}
+	if pe, ok := pathToSchemaCache[f.Tag]; ok {
+		return pe, nil
+	} else {
+		pathTag, ok := f.Tag.Lookup("path")
+		if !ok || pathTag == "" {
+			return nil, fmt.Errorf("field %s did not specify a path", f.Name)
+		}
 
-	paths := strings.Split(pathTag, "|")
-	if len(paths) == 1 {
-		pathTag = strings.TrimPrefix(pathTag, "/")
-		return strings.Split(pathTag, "/"), nil
-	}
-	for _, pv := range paths {
-		pv = strings.TrimPrefix(pv, "/")
-		pe := strings.Split(pv, "/")
-		if len(pe) > 1 {
-			return pe, nil
+		paths := strings.Split(pathTag, "|")
+		if len(paths) == 1 {
+			pathTag = strings.TrimPrefix(pathTag, "/")
+			retPath := strings.Split(pathTag, "/")
+			pathToSchemaCache[f.Tag] = retPath
+			return retPath, nil
+		}
+		for _, pv := range paths {
+			pv = strings.TrimPrefix(pv, "/")
+			pe := strings.Split(pv, "/")
+			if len(pe) > 1 {
+				pathToSchemaCache[f.Tag] = pe
+				return pe, nil
+			}
 		}
-	}
 
-	return nil, fmt.Errorf("field %s had path tag %s with |, but no elements of form a/b", f.Name, pathTag)
+		return nil, fmt.Errorf("field %s had path tag %s with |, but no elements of form a/b", f.Name, pathTag)
+	}
 }
 
 // SchemaTreePath returns the schema tree path of the supplied yang.Entry
@@ -215,6 +227,10 @@
 		refSchema = refSchema.Dir[pe]
 	}
 
+	if refSchema.Type.Kind == yang.Yleafref {
+		return FindLeafRefSchema(refSchema, refSchema.Type.Path)
+	}
+
 	return refSchema, nil
 }
 
diff -ruN ygot-dir-orig/ygot/util/reflect.go ygot-dir/ygot/util/reflect.go
--- ygot-dir-orig/ygot/util/reflect.go	2020-04-20 17:01:36.389148000 -0700
+++ ygot-dir/ygot/util/reflect.go	2020-04-20 17:09:33.707398000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package util
 
 import (
@@ -191,8 +194,10 @@
 
 // InsertIntoMap inserts value with key into parent which must be a map.
 func InsertIntoMap(parentMap interface{}, key interface{}, value interface{}) error {
-	DbgPrint("InsertIntoMap into parent type %T with key %v(%T) value \n%s\n (%T)",
-		parentMap, ValueStrDebug(key), key, pretty.Sprint(value), value)
+    if debugLibrary {
+	   DbgPrint("InsertIntoMap into parent type %T with key %v(%T) value \n%s\n (%T)",
+	      parentMap, ValueStrDebug(key), key, pretty.Sprint(value), value)
+    }
 
 	v := reflect.ValueOf(parentMap)
 	t := reflect.TypeOf(parentMap)
@@ -283,7 +288,7 @@
 		n = reflect.Zero(ft.Type)
 	}
 
-	if !isFieldTypeCompatible(ft, n) {
+	if !isFieldTypeCompatible(ft, n) && !IsValueTypeCompatible(ft.Type, v) {
 		return fmt.Errorf("cannot assign value %v (type %T) to struct field %s (type %v) in struct %T", fieldValue, fieldValue, fieldName, ft.Type, parentStruct)
 	}
 
@@ -458,8 +463,17 @@
 // found in the tree at the specified path.
 // TODO(wenbli): need unit test
 func ChildSchema(schema *yang.Entry, f reflect.StructField) (*yang.Entry, error) {
-	pathTag, _ := f.Tag.Lookup("path")
-	DbgSchema("childSchema for schema %s, field %s, tag %s\n", schema.Name, f.Name, pathTag)
+	if (schema.ChildSchemaCache == nil) {
+		schema.ChildSchemaCache = make(map[reflect.StructTag]*yang.Entry)
+	} else if cschema, ok := schema.ChildSchemaCache[f.Tag]; ok {
+		return cschema, nil
+	}
+	
+	if IsDebugSchemaEnabled() {
+		pathTag, _ := f.Tag.Lookup("path")
+		DbgSchema("childSchema for schema %s, field %s, tag %s\n", schema.Name, f.Name, pathTag)	
+	}
+	
 	p, err := RelativeSchemaPath(f)
 	if err != nil {
 		return nil, err
@@ -490,6 +504,7 @@
 	}
 	if foundSchema {
 		DbgSchema(" - found\n")
+		schema.ChildSchemaCache[f.Tag] = childSchema
 		return childSchema, nil
 	}
 	DbgSchema(" - not found\n")
@@ -505,11 +520,15 @@
 		// path element i.e. choice1/case1/leaf1 path in the schema will have
 		// struct tag `path:"leaf1"`. This implies that only paths with length
 		// 1 are eligible for this matching.
+		schema.ChildSchemaCache[f.Tag] = nil
 		return nil, nil
 	}
 	entries := FindFirstNonChoiceOrCase(schema)
 
-	DbgSchema("checking for %s against non choice/case entries: %v\n", p[0], stringMapKeys(entries))
+    if IsDebugSchemaEnabled() {
+		DbgSchema("checking for %s against non choice/case entries: %v\n", p[0], stringMapKeys(entries))
+    }
+    
 	for path, entry := range entries {
 		splitPath := SplitPath(path)
 		name := splitPath[len(splitPath)-1]
@@ -517,11 +536,13 @@
 
 		if StripModulePrefix(name) == p[0] {
 			DbgSchema(" - match\n")
+			schema.ChildSchemaCache[f.Tag] = entry
 			return entry, nil
 		}
 	}
 
 	DbgSchema(" - no matches\n")
+	schema.ChildSchemaCache[f.Tag] = nil
 	return nil, nil
 }
 
diff -ruN ygot-dir-orig/ygot/ygen/codegen.go ygot-dir/ygot/ygen/codegen.go
--- ygot-dir-orig/ygot/ygen/codegen.go	2020-04-20 17:01:37.268027000 -0700
+++ ygot-dir/ygot/ygen/codegen.go	2020-04-20 17:09:34.497762000 -0700
@@ -15,6 +15,10 @@
 // Package ygen contains a library to generate Go structs from a YANG model.
 // The Goyang parsing library is used to parse YANG. The output can consider
 // OpenConfig-specific conventions such that the schema is compressed.
+
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ygen
 
 import (
@@ -946,7 +950,7 @@
 			dirs[ch.Path()] = ch
 			// Recurse down the tree.
 			errs = util.AppendErrs(errs, findMappableEntities(ch, dirs, enums, excludeModules, compressPaths, modules))
-		case ch.Kind == yang.AnyDataEntry:
+		case (ch.Kind == yang.AnyDataEntry), (ch.Kind == yang.NotificationEntry):	
 			continue
 		default:
 			errs = util.AppendErr(errs, fmt.Errorf("unknown type of entry %v in findMappableEntities for %s", e.Kind, e.Path()))
diff -ruN ygot-dir-orig/ygot/ygen/genstate.go ygot-dir/ygot/ygen/genstate.go
--- ygot-dir-orig/ygot/ygen/genstate.go	2020-04-20 17:01:37.274961000 -0700
+++ ygot-dir/ygot/ygen/genstate.go	2020-04-20 17:09:34.508597000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ygen
 
 import (
@@ -83,6 +86,7 @@
 // noUnderscores boolean.
 func (s *enumGenState) enumeratedUnionEntry(e *yang.Entry, compressPaths, noUnderscores bool) ([]*yangEnum, error) {
 	var es []*yangEnum
+	enumSet := make(map[string]*yangEnum)
 
 	for _, t := range util.EnumeratedUnionTypes(e.Type.Type) {
 		var en *yangEnum
@@ -111,20 +115,36 @@
 				}
 			}
 
-			en = &yangEnum{
-				name: enumName,
-				entry: &yang.Entry{
-					Name: e.Name,
-					Type: &yang.YangType{
-						Name: e.Type.Name,
-						Kind: yang.Yenum,
-						Enum: t.Enum,
+			if tmpEn, ok := enumSet[enumName]; ok {
+				enumTmp := yang.NewEnumType()
+				for eNm, eVal := range t.Enum.NameMap() {
+					if err := enumTmp.Set(eNm, eVal); err != nil {
+						return nil, fmt.Errorf("%v", err)
+					}
+				}
+				for eNm, eVal := range tmpEn.entry.Type.Enum.NameMap() {
+					if err := enumTmp.Set(eNm, eVal); err != nil {
+						return nil, fmt.Errorf("%v", err)
+					}
+				}
+				tmpEn.entry.Type.Enum = enumTmp
+				continue
+			} else {
+				en = &yangEnum{
+					name: enumName,
+					entry: &yang.Entry{
+						Name: e.Name,
+						Type: &yang.YangType{
+							Name: e.Type.Name,
+							Kind: yang.Yenum,
+							Enum: t.Enum,
+						},
+						Annotation: map[string]interface{}{"valuePrefix": util.SchemaPathNoChoiceCase(e)},
 					},
-					Annotation: map[string]interface{}{"valuePrefix": util.SchemaPathNoChoiceCase(e)},
-				},
+				}
+				enumSet[enumName] = en
 			}
 		}
-
 		es = append(es, en)
 	}
 
diff -ruN ygot-dir-orig/ygot/ygot/struct_validation_map.go ygot-dir/ygot/ygot/struct_validation_map.go
--- ygot-dir-orig/ygot/ygot/struct_validation_map.go	2020-04-20 17:01:37.543875000 -0700
+++ ygot-dir/ygot/ygot/struct_validation_map.go	2020-04-20 17:09:34.748590000 -0700
@@ -19,6 +19,10 @@
 //	  to return pointers to a type.
 //	- Renders structs to other output formats such as JSON, or gNMI
 //	  notifications.
+
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ygot
 
 import (
@@ -336,19 +340,20 @@
 // EmitJSON takes an input ValidatedGoStruct (produced by ygen with validation enabled)
 // and serialises it to a JSON string. By default, produces the Internal format JSON.
 func EmitJSON(s ValidatedGoStruct, opts *EmitJSONConfig) (string, error) {
-	var (
-		vopts          []ValidationOption
-		skipValidation bool
-	)
-
-	if opts != nil {
-		vopts = opts.ValidationOpts
-		skipValidation = opts.SkipValidation
-	}
-
-	if err := s.Validate(vopts...); !skipValidation && err != nil {
-		return "", fmt.Errorf("validation err: %v", err)
-	}
+//	var (
+//		vopts          []ValidationOption
+//		skipValidation bool
+//	)
+//
+//	if opts != nil {
+//		vopts = opts.ValidationOpts
+//		skipValidation = opts.SkipValidation
+//	}
+//
+//   commenting out the validation block since its not needed, and also to improve the performance
+//	if err := s.Validate(vopts...); !skipValidation && err != nil {
+//		return "", fmt.Errorf("validation err: %v", err)
+//	}
 
 	v, err := makeJSON(s, opts)
 	if err != nil {
@@ -555,7 +560,13 @@
 				dstField.Set(srcField)
 			}
 		default:
-			dstField.Set(srcField)
+                    if srcField.Type().Implements(reflect.TypeOf((*GoEnum)(nil)).Elem()) == true {
+                        if srcField.Int() != 0 {
+                            dstField.Set(srcField)
+                        }
+                    } else {
+                        dstField.Set(srcField)
+                    }
 		}
 	}
 	return nil
diff -ruN ygot-dir-orig/ygot/ytypes/container.go ygot-dir/ygot/ytypes/container.go
--- ygot-dir-orig/ygot/ytypes/container.go	2020-04-20 17:01:38.054290000 -0700
+++ ygot-dir/ygot/ytypes/container.go	2020-04-20 17:09:35.261187000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -69,9 +72,13 @@
 			case cschema != nil:
 				// Regular named child.
 				if errs := Validate(cschema, fieldValue); errs != nil {
-					errors = util.AppendErrs(errors, util.PrefixErrors(errs, cschema.Path()))
+					if errs.Error() != "ERROR_READONLY_OBJECT_FOUND" {
+						errors = util.AppendErrs(errors, util.PrefixErrors(errs, cschema.Path()))	
+					} else if len(errors) == 0 {
+						errors = util.AppendErrs(errors, errs)
+					}
 				}
-			case !util.IsValueNilOrDefault(structElems.Field(i).Interface()):
+			case !structElems.Field(i).IsNil():
 				// Either an element in choice schema subtree, or bad field.
 				// If the former, it will be found in the choice check below.
 				extraFields[fieldName] = nil
@@ -100,6 +107,10 @@
 	if len(extraFields) > 0 {
 		errors = util.AppendErr(errors, fmt.Errorf("fields %v are not found in the container schema %s", stringMapSetToSlice(extraFields), schema.Name))
 	}
+	
+	if len(errors) == 0 && schema.ReadOnly() == true {
+		errors = util.AppendErrs(errors, util.NewErrs(fmt.Errorf("ERROR_READONLY_OBJECT_FOUND")))
+	}
 
 	return util.UniqueErrors(errors)
 }
@@ -217,7 +228,10 @@
 		}
 	}
 
-	util.DbgPrint("container after unmarshal:\n%s\n", pretty.Sprint(destv.Interface()))
+	if util.IsDebugLibraryEnabled() {
+		util.DbgPrint("container after unmarshal:\n%s\n", pretty.Sprint(destv.Interface()))
+	} 
+	
 	return nil
 }
 
diff -ruN ygot-dir-orig/ygot/ytypes/leaf.go ygot-dir/ygot/ytypes/leaf.go
--- ygot-dir-orig/ygot/ytypes/leaf.go	2020-04-20 17:01:38.059551000 -0700
+++ ygot-dir/ygot/ytypes/leaf.go	2020-04-20 17:09:35.268301000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -77,7 +80,7 @@
 
 	switch ykind {
 	case yang.Ybinary:
-		return util.NewErrs(validateBinary(schema, value))
+		return util.NewErrs(validateBinary(schema, rv))
 	case yang.Ybits:
 		return nil
 		// TODO(mostrowski): restore when representation is decided.
@@ -258,7 +261,7 @@
 // during validation against each matching schema otherwise.
 func validateMatchingSchemas(schema *yang.Entry, value interface{}) util.Errors {
 	var errors []error
-	ss := findMatchingSchemasInUnion(schema.Type, value)
+	ss := findMatchingSchemasInUnion(schema, schema.Type, value)
 	var kk []yang.TypeKind
 	for _, s := range ss {
 		kk = append(kk, s.Type.Kind)
@@ -289,17 +292,25 @@
 // findMatchingSchemasInUnion returns all schemas in the given union type,
 // including those within nested unions, that match the Go type of value.
 // value must not be nil.
-func findMatchingSchemasInUnion(ytype *yang.YangType, value interface{}) []*yang.Entry {
+func findMatchingSchemasInUnion(schema *yang.Entry, ytype *yang.YangType, value interface{}) []*yang.Entry {
 	var matches []*yang.Entry
 
 	util.DbgPrint("findMatchingSchemasInUnion for type %T, kind %s", value, reflect.TypeOf(value).Kind())
 	for _, t := range ytype.Type {
 		if t.Kind == yang.Yunion {
 			// Recursively check all union types within this union.
-			matches = append(matches, findMatchingSchemasInUnion(t, value)...)
+			matches = append(matches, findMatchingSchemasInUnion(schema, t, value)...)
 			continue
 		}
 
+		if t.Kind == yang.Yleafref {
+			ns, err := util.FindLeafRefSchema(schema, t.Path)
+			if err != nil {
+				log.Warningf("not found base Go type for type %v in union value %s", t.Kind, util.ValueStr(value))
+				continue
+			}
+			t = ns.Type
+		}
 		ybt := yangBuiltinTypeToGoType(t.Kind)
 		if reflect.ValueOf(value).Kind() == reflect.Ptr {
 			ybt = ygot.ToPtr(yangBuiltinTypeToGoType(t.Kind))
@@ -647,7 +658,9 @@
 		return nil, fmt.Errorf("%s ΛEnumTypes function returned wrong type %T, want map[string][]reflect.Type", t, ei)
 	}
 
-	util.DbgPrint("path is %s for schema %s", absoluteSchemaDataPath(schema), schema.Name)
+	if util.IsDebugLibraryEnabled() {
+		util.DbgPrint("path is %s for schema %s", absoluteSchemaDataPath(schema), schema.Name)	
+	}
 
 	return enumTypesMap[absoluteSchemaDataPath(schema)], nil
 }
diff -ruN ygot-dir-orig/ygot/ytypes/list.go ygot-dir/ygot/ytypes/list.go
--- ygot-dir-orig/ygot/ytypes/list.go	2020-04-20 17:01:38.064825000 -0700
+++ ygot-dir/ygot/ytypes/list.go	2020-04-20 17:09:35.274952000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -217,6 +220,9 @@
 		if len(schema.Key) == 0 {
 			return fmt.Errorf("list %s with config set must have a key", schema.Name)
 		}
+		if schema.IsSchemaValidated == true {
+			return nil
+		}
 		keys := strings.Fields(schema.Key)
 		keysMissing := make(map[string]bool)
 		for _, v := range keys {
@@ -232,6 +238,7 @@
 		}
 	}
 
+	schema.IsSchemaValidated = true
 	return nil
 }
 
@@ -350,7 +357,9 @@
 			return err
 		}
 	}
-	util.DbgPrint("list after unmarshal:\n%s\n", pretty.Sprint(parent))
+	if util.IsDebugLibraryEnabled() {
+		util.DbgPrint("list after unmarshal:\n%s\n", pretty.Sprint(parent))	
+	}
 
 	return nil
 }
@@ -394,11 +403,91 @@
 		if util.IsValuePtr(fv) {
 			ft = ft.Elem()
 		}
-
-		nv, err := StringToType(ft, fieldVal)
+		sf, ok := val.Elem().Type().FieldByName(fn)
+		if ok == false {
+			return fmt.Errorf("Field %s not present in the struct %s", fn, val.Elem())
+		}
+		cschema, err := util.ChildSchema(schema, sf)
 		if err != nil {
 			return err
 		}
+		keyLeafKind := cschema.Type.Kind
+		if keyLeafKind == yang.Yleafref {
+			lrfschema, err := util.ResolveIfLeafRef(cschema)
+			if err != nil {
+				return err
+			}
+			keyLeafKind = lrfschema.Type.Kind
+		}
+
+		var nv reflect.Value
+		if keyLeafKind == yang.Yunion && strings.HasSuffix(ft.Name(), "_Union") {
+			sks, err := getUnionKindsNotEnums(cschema)
+			if err != nil {
+				return err
+			}
+			for _, sk := range sks {
+				gv, err := StringToType(reflect.TypeOf(yangBuiltinTypeToGoType(sk)), fieldVal)
+				if err == nil {
+					mn := "To_" + ft.Name()
+					mapMethod := val.MethodByName(mn)
+					if !mapMethod.IsValid() {
+						return fmt.Errorf("%s does not have a %s function", val, mn)
+					}
+					ec := mapMethod.Call([]reflect.Value{gv})
+					if len(ec) != 2 {
+						return fmt.Errorf("%s %s function returns %d params", ft.Name(), mn, len(ec))
+					}
+					ei := ec[0].Interface()
+					ee := ec[1].Interface()
+					if ee != nil {
+						return fmt.Errorf("unmarshaled %v type %T does not have a union type: %v", fieldVal, fieldVal, ee)
+					}
+					nv = reflect.ValueOf(ei)
+					break
+				}
+			}
+			
+			if nv.IsValid() == false {
+				ets, err := schemaToEnumTypes(cschema, val.Type())
+				if err != nil {
+					return err
+				}
+				for _, et := range ets {
+					ev, err := castToEnumValue(et, fieldVal)
+					if err != nil {
+						return err
+					}
+					if ev != nil {
+						mn := "To_" + ft.Name()
+						mapMethod := val.MethodByName(mn)
+						if !mapMethod.IsValid() {
+							return fmt.Errorf("%s does not have a %s function", val, mn)
+						}
+						ec := mapMethod.Call([]reflect.Value{reflect.ValueOf(ev)})
+						if len(ec) != 2 {
+							return fmt.Errorf("%s %s function returns %d params", ft.Name(), mn, len(ec))
+						}
+						ei := ec[0].Interface()
+						ee := ec[1].Interface()
+						if ee != nil {
+							return fmt.Errorf("unmarshaled %v type %T does not have a union type: %v", fieldVal, fieldVal, ee)
+						}
+						nv = reflect.ValueOf(ei)
+						break
+					}
+					fmt.Errorf("could not unmarshal %v into enum type: %s\n", fieldVal, err)
+				}
+				if nv.IsValid() == false {
+					return fmt.Errorf("could not create the value type for the field name %s  with the value %s", fn, fieldVal)
+				}
+			}
+		} else {
+			nv, err = StringToType(ft, fieldVal)
+			if err != nil {
+				return err
+			}
+		}
 		return util.InsertIntoStruct(val.Interface(), fn, nv.Interface())
 	}
 
@@ -494,6 +583,9 @@
 	}
 
 	// TODO(yusufsn): When the key is a leafref, its target should be filled out.
+    if (len(keys) == 0) { 
+         return nil, nil
+    } 
 	mapVal, err := makeValForInsert(schema, root, keys)
 	if err != nil {
 		return nil, fmt.Errorf("failed to create map value for insert, root %T, keys %v: %v", root, keys, err)
diff -ruN ygot-dir-orig/ygot/ytypes/node.go ygot-dir/ygot/ytypes/node.go
--- ygot-dir-orig/ygot/ytypes/node.go	2020-04-20 17:01:38.070933000 -0700
+++ ygot-dir/ygot/ytypes/node.go	2020-04-20 17:09:35.282737000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -140,6 +143,16 @@
 				if err := util.InitializeStructField(root, ft.Name); err != nil {
 					return nil, status.Errorf(codes.Unknown, "failed to initialize struct field %s in %T, child schema %v, path %v", ft.Name, root, cschema, path)
 				}
+
+				if cschema.IsLeaf() || cschema.IsLeafList() {
+					if len(path.Elem) == 1 && len(path.Elem[0].Key) == 1 {
+						var vals []string
+						vals = append(vals, path.Elem[0].Key[path.Elem[0].Name])
+						if args.val, err = ygot.EncodeTypedValue(vals, gpb.Encoding_JSON_IETF); err != nil {
+							return nil, status.Errorf(codes.Unknown, "failed to get the typed value '%v' for leaf/leaf-list => %s in %T ; because of %v", vals, ft.Name, root, err)
+						}
+					}
+				}
 			}
 
 			// If delete is specified, and the path is exhausted, then we set the
@@ -319,6 +332,11 @@
 		if err != nil {
 			return nil, err
 		}
+
+		if (key == nil) {
+			return []*TreeNode{{Path: traversedPath,Schema: schema,Data: root,}}, nil
+		}
+
 		nodes, err := retrieveNode(schema, rv.MapIndex(reflect.ValueOf(key)).Interface(), util.PopGNMIPath(path), appendElem(traversedPath, path.GetElem()[0]), args)
 		if err != nil {
 			return nil, err
diff -ruN ygot-dir-orig/ygot/ytypes/string_type.go ygot-dir/ygot/ytypes/string_type.go
--- ygot-dir-orig/ygot/ytypes/string_type.go	2020-04-20 17:01:38.079807000 -0700
+++ ygot-dir/ygot/ytypes/string_type.go	2020-04-20 17:09:35.287791000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -23,6 +26,8 @@
 	"github.com/openconfig/goyang/pkg/yang"
 )
 
+var regexpCache map[string]*regexp.Regexp = make(map[string]*regexp.Regexp)
+
 // Refer to: https://tools.ietf.org/html/rfc6020#section-9.4.
 
 // validateString validates value, which must be a Go string type, against the
@@ -48,10 +53,18 @@
 
 	// Check that the value satisfies any regex patterns.
 	for _, p := range schema.Type.Pattern {
-		r, err := regexp.Compile(fixYangRegexp(p))
-		if err != nil {
-			return err
+		var r *regexp.Regexp
+		if val, ok := regexpCache[p]; ok {
+			r = val
+		} else {
+			var err error
+			r, err = regexp.Compile(fixYangRegexp(p))
+			if err != nil {
+				return err
+			}
+			regexpCache[p] = r	
 		}
+		
 		// fixYangRegexp adds ^(...)$ around the pattern - the result is
 		// equivalent to a full match of whole string.
 		if !r.MatchString(stringVal) {
@@ -105,13 +118,29 @@
 		return fmt.Errorf("string schema %s has wrong type %v", schema.Name, schema.Type.Kind)
 	}
 
+	if schema.IsSchemaValidated {
+		return nil
+	}
+	
+	var err error
+	
 	for _, p := range schema.Type.Pattern {
-		if _, err := regexp.Compile(fixYangRegexp(p)); err != nil {
-			return fmt.Errorf("error generating regexp %s %v for schema %s", p, err, schema.Name)
-		}
+		_, ok := regexpCache[p]
+		if (ok == false) {
+			var r *regexp.Regexp
+			if r, err = regexp.Compile(fixYangRegexp(p)); err != nil {
+				return fmt.Errorf("error generating regexp %s %v for schema %s", p, err, schema.Name)
+			} else {
+				regexpCache[p] = r
+			}
+		}		
 	}
 
-	return validateLengthSchema(schema)
+	if err = validateLengthSchema(schema); err == nil {
+		schema.IsSchemaValidated = true
+	}
+	
+	return err 
 }
 
 // fixYangRegexp takes a pattern regular expression from a YANG module and
diff -ruN ygot-dir-orig/ygot/ytypes/unmarshal.go ygot-dir/ygot/ytypes/unmarshal.go
--- ygot-dir-orig/ygot/ytypes/unmarshal.go	2020-04-20 17:01:38.085897000 -0700
+++ ygot-dir/ygot/ytypes/unmarshal.go	2020-04-20 17:09:35.293448000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -81,7 +84,10 @@
 	if schema == nil {
 		return fmt.Errorf("nil schema for parent type %T, value %v (%T)", parent, value, value)
 	}
-	util.DbgPrint("Unmarshal value %v, type %T, into parent type %T, schema name %s", util.ValueStrDebug(value), value, parent, schema.Name)
+	
+	if (util.IsDebugLibraryEnabled()) {
+		util.DbgPrint("Unmarshal value %v, type %T, into parent type %T, schema name %s", util.ValueStrDebug(value), value, parent, schema.Name)	
+	}
 
 	if enc == GNMIEncoding && !(schema.IsLeaf() || schema.IsLeafList()) {
 		return errors.New("unmarshalling a non leaf node isn't supported in GNMIEncoding mode")
diff -ruN ygot-dir-orig/ygot/ytypes/validate.go ygot-dir/ygot/ytypes/validate.go
--- ygot-dir-orig/ygot/ytypes/validate.go	2020-04-20 17:01:38.090352000 -0700
+++ ygot-dir/ygot/ytypes/validate.go	2020-04-20 17:09:35.298400000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -74,7 +77,7 @@
 		errs = ValidateLeafRefData(schema, value, leafrefOpt)
 	}
 
-	util.DbgPrint("Validate with value %v, type %T, schema name %s", util.ValueStr(value), value, schema.Name)
+	util.DbgPrint("Validate with value %v, type %T, schema name %s", util.ValueStrDebug(value), value, schema.Name)
 
 	switch {
 	case schema.IsLeaf():
